plugins {
    alias(libs.plugins.gradle.android.library)
    id "kotlin-multiplatform"
    alias(libs.plugins.gradle.detekt)
    alias(libs.plugins.gradle.dokka)
    id "jacoco"
}

jacoco {
    toolVersion = libs.versions.jacoco
}

android {
    defaultConfig {
        compileSdk 34
        namespace = "$group"
        minSdkVersion 15
        targetSdk 34
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                excludes = ["jdk.internal.*"]       //This line
            }
        }
    }
}

kotlin {
    jvmToolchain(17)
    androidTarget {
        publishLibraryVariantsGroupedByFlavor = true
        mavenPublication {
            artifactId = "arbor-android"
        }
    }

    sourceSets {
        androidMain {
            dependencies {
                implementation kotlin("stdlib")
                implementation projects.arbor
            }
        }
        androidUnitTest {
            dependencies {
                implementation(libs.kotlin.test.junit)
                implementation(libs.mockito.core)
            }
        }
    }
}

tasks.register("jacocoTestReportAndroid", JacocoReport) {
    group = "jacoco"
    dependsOn.add("test")

    def fileFilter = ["**/R.class", "**/R\$*.class", "**/BuildConfig.*", "**/Manifest*.*", "**/*Test*.*", "android/**/*.*"]
    def debugTree = fileTree(dir: layout.buildDirectory.dir("tmp/kotlin-classes/debug"), excludes: fileFilter)

    classDirectories.from(files(debugTree))
    sourceDirectories.from(files("src/androidMain/kotlin"))
    executionData.from(fileTree(dir: layout.buildDirectory.dir("jacoco"), include: "*.exec"))

    reports {
        xml.required = true
        html.required = true
    }
}

detekt {
    buildUponDefaultConfig = true
    allRules = false
    config.setFrom(project(projects.arbor.path).files("detekt.yml"))
}

tasks.register("dokkaJavadocAndroidJar", Jar) {
    group = "publishing"
    archiveClassifier.set("javadoc")
    from dokkaHtml
}

tasks.register("androidSourcesJar", Jar) {
    group = "publishing"
    archiveClassifier.set("sources")
    from kotlin.sourceSets.androidMain.kotlin.srcDirs
}

tasks.named("check").get().dependsOn("detekt")
tasks.named("build").get().dependsOn(
        "androidSourcesJar",
        "dokkaJavadocAndroidJar",
        "jacocoTestReportAndroid",
)
