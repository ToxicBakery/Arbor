plugins {
    id 'com.android.library'
    id 'kotlin-multiplatform'
    id 'io.gitlab.arturbosch.detekt'
    id 'org.jetbrains.dokka'
    id 'jacoco'
}

jacoco {
    toolVersion = jacoco_version
}

android {
    compileSdk 34
    defaultConfig {
        namespace = "$group"
        minSdkVersion 15
        targetSdk 34
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']       //This line
            }
        }
    }
}

kotlin {
    jvmToolchain(17)
    androidTarget {
        publishLibraryVariantsGroupedByFlavor = true
        mavenPublication {
            artifactId = 'arbor-android'
        }
    }

    sourceSets {
        androidMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                implementation project(':arbor')
            }
        }
        androidTest {
            dependencies {
                implementation project(':arbor')
                implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
                implementation "org.mockito:mockito-core:3.5.15"
            }
        }
    }
}

tasks.register("jacocoTestReportAndroid", JacocoReport) {
    group = "jacoco"
    dependsOn.add("test")

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)

    classDirectories.from(files(debugTree))
    sourceDirectories.from(files("src/androidMain/kotlin"))
    executionData.from(fileTree(dir: "$buildDir/jacoco", include: "*.exec"))

    reports {
        xml.required = true
        html.required = true
    }
}

detekt {
    buildUponDefaultConfig = true
    allRules = false
    config.setFrom(project(':arbor').files("detekt.yml"))
}

tasks.register("dokkaJavadocAndroidJar", Jar) {
    group = "publishing"
    archiveClassifier.set('javadoc')
    from layout.buildDirectory.dir("javadoc/android")
}

tasks.register("androidSourcesJar", Jar) {
    group = "publishing"
    archiveClassifier.set('sources')
    from kotlin.sourceSets.androidMain.kotlin.srcDirs
}

tasks.named("check").get().dependsOn("detekt")
tasks.named("build").get().dependsOn(
        "androidSourcesJar",
        "dokkaJavadocAndroidJar",
        "jacocoTestReportAndroid",
)
