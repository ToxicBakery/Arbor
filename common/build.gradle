plugins {
    id 'kotlin-multiplatform'
    id 'maven-publish'
    id 'com.github.salomonbrys.gradle.kotlin.js.mpp-tests.node'
    id 'signing'
    id 'org.jetbrains.dokka'
    id 'io.gitlab.arturbosch.detekt'
    id 'jacoco'
}

jacoco {
    toolVersion = jacoco_version
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations.create("compileClasspath")

kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm') {
            mavenPublication {
                artifactId = 'arbor-jvm'
            }
        }
        fromPreset(presets.js, 'js') {
            tasks[compilations.main.compileKotlinTaskName].kotlinOptions.moduleKind = "umd"
            kotlinJsNodeTests {
                thisTarget(js) {
                    engine = mocha
                }
            }
            mavenPublication {
                artifactId = 'arbor-js'
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib')
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test-junit')
            }
        }
    }
}

task jacocoTestReportJvm(type: JacocoReport) {
    classDirectories = files(
            "$buildDir/classes/kotlin/common/main",
            "$buildDir/classes/kotlin/jvm/main")
    sourceDirectories = files(
            "src/commonMain/kotlin",
            "src/jvmMain/kotlin")
    //noinspection ChangeToOperator
    executionData = files("$buildDir/jacoco/jvmTest.exec")

    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task jacocoTestReportUnified(type: JacocoReport, dependsOn: ':common:android:build') {
    classDirectories = files(
            "$buildDir/classes/kotlin/common/main",
            "$buildDir/classes/kotlin/jvm/main",
            "android/build/intermediates/packaged-classes/debug")
    sourceDirectories = files(
            "src/commonMain/kotlin",
            "src/jvmMain/kotlin",
            "android/src/androidMain/kotlin")
    //noinspection ChangeToOperator
    executionData = files(
            "$buildDir/jacoco/jvmTest.exec")
            .plus(fileTree(dir: "android/build/jacoco", include: "*.exec"))

    reports {
        xml.enabled = true
        xml.setDestination(file("$buildDir/reports/jacoco/unified/jacocoTestReportUnified.xml"))
        html.enabled = true
        html.setDestination(file("$buildDir/reports/jacoco/unified/html"))
    }
}

detekt {
    input = files(
            "src/commonMain/kotlin",
            "src/jsMain/kotlin",
            "src/jvmMain/kotlin",
    )
    filters = ".*/resources/.*,.*/build/.*"
    config = files("detekt.yml")
    reports.xml.enabled = false
}

task dokkaGhPages(type: org.jetbrains.dokka.gradle.DokkaTask) {
    impliedPlatforms = ["Common", "JS", "JVM"]
    kotlinTasks { [] }
    outputFormat = 'html'
    outputDirectory = "${project.projectDir}/gh-pages"
    sourceRoot {
        path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
        platforms = ["Common"]
    }
    sourceRoot {
        path = "common/android/src/androidMain/kotlin"
        platforms = ["Android"]
    }
    sourceRoot {
        path = kotlin.sourceSets.jsMain.kotlin.srcDirs[0]
        platforms = ["JS"]
    }
    sourceRoot {
        path = kotlin.sourceSets.jvmMain.kotlin.srcDirs[0]
        platforms = ["JVM"]
    }

    doLast {
        new File(outputDirectory, 'CNAME').write("arbor.toxicbakery.dev")
    }
}

task dokkaCommon(type: org.jetbrains.dokka.gradle.DokkaTask) {
    impliedPlatforms = ["Common"]
    kotlinTasks { [] }
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc/common"
    sourceRoot {
        path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
        platforms = ["Common"]
    }
}

task dokkaJs(type: org.jetbrains.dokka.gradle.DokkaTask) {
    impliedPlatforms = ["JS", "Common"]
    kotlinTasks { [] }
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc/js"
    sourceRoot {
        path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
        platforms = ["Common"]
    }
    sourceRoot {
        path = kotlin.sourceSets.jsMain.kotlin.srcDirs[0]
        platforms = ["JS"]
    }
}

task dokkaJvm(type: org.jetbrains.dokka.gradle.DokkaTask) {
    impliedPlatforms = ["JVM", "Common"]
    kotlinTasks { [] }
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc/jvm"
    sourceRoot {
        path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
        platforms = ["Common"]
    }
    sourceRoot {
        path = kotlin.sourceSets.jvmMain.kotlin.srcDirs[0]
        platforms = ["JVM"]
    }
}

task emptySourcesJar(type: Jar) {
    classifier = 'sources'
}
task emptyJavadocJar(type: Jar) {
    classifier = 'javadoc'
}

task dokkaJavadocCommonJar(type: Jar, dependsOn: dokkaCommon) {
    classifier = 'javadoc'
    from "$buildDir/javadoc/common"
}

task dokkaJavadocJsJar(type: Jar, dependsOn: dokkaJs) {
    classifier = 'javadoc'
    from "$buildDir/javadoc/js"
}

task dokkaJavadocJvmJar(type: Jar, dependsOn: dokkaJvm) {
    classifier = 'javadoc'
    from "$buildDir/javadoc/jvm"
}

publishing {
    publications.all { pub ->
        pom.withXml {
            def root = asNode()

            root.children().last() + {
                resolveStrategy = DELEGATE_FIRST

                description POM_DESCRIPTION
                name POM_NAME
                url POM_URL
                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }
                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }
                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                        email POM_DEVELOPER_EMAIL
                        organization POM_DEVELOPER_ORGANIZATION
                        organizationUrl POM_DEVELOPER_ORGANIZATION_URL
                    }
                }
            }

            if (pub.artifactId == "arbor-android") {
                def dependenciesNode = asNode().appendNode('dependencies')
                appendDepNode(dependenciesNode, 'org.jetbrains.kotlin', 'kotlin-stdlib', kotlin_version, 'runtime')
                appendDepNode(dependenciesNode, 'com.ToxicBakery.logging', 'arbor-jvm', version, 'runtime')
            }
        }
    }

    task dokkaJavadocAndroidJar(type: Jar, dependsOn: project("android").tasks.find { it.name == 'build' }) {
        classifier = 'javadoc'
        from "android/build/libs/android-$version-javadoc.jar"
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from "android/build/libs/android-$version-sources.jar"
    }

    publish.dependsOn ':common:android:build'
    publishToMavenLocal.dependsOn ':common:android:build'

    afterEvaluate {
        publications {
            maven(MavenPublication) {
                artifactId "arbor-android"
                artifact 'android/build/outputs/aar/android-release.aar'
                artifact dokkaJavadocAndroidJar
                artifact androidSourcesJar
            }
        }
        publications.getByName('js') {
            artifact dokkaJavadocJsJar
        }
        publications.getByName('jvm') {
            artifact dokkaJavadocJvmJar
        }
        publications.getByName('kotlinMultiplatform') {
            artifact dokkaJavadocCommonJar
            artifact emptySourcesJar
        }
        publications.getByName('metadata') {
            artifact dokkaJavadocCommonJar
            artifactId = 'metadata'
        }
    }

    repositories {
        def releaseUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        def snapshotUrl = "https://oss.sonatype.org/content/repositories/snapshots"

        maven {
            url !version.contains("SNAPSHOT") ? releaseUrl : snapshotUrl
            credentials {
                username System.getenv('SONATYPE_USERNAME') ?: ""
                password System.getenv('SONATYPE_PASSWORD') ?: ""
            }
        }
    }
}

static def appendDepNode(Node node, String groupId, String artifactId, String ver, String scope) {
    def newNode = node.appendNode('dependency')
    newNode.appendNode('groupId', groupId)
    newNode.appendNode('artifactId', artifactId)
    newNode.appendNode('version', ver)
    newNode.appendNode('scope', scope)
}

signing {
    required false
    sign publishing.publications
}

build.dependsOn ':common:android:build', ':common:android:test', 'jacocoTestReportJvm', 'jacocoTestReportUnified'
publish.dependsOn build
publishToMavenLocal.dependsOn build

afterEvaluate {
    check.dependsOn('detekt')
}
