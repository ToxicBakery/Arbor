plugins {
    id 'kotlin-multiplatform'
    id 'maven-publish'
    id 'signing'
    alias(libs.plugins.gradle.detekt)
    alias(libs.plugins.gradle.dokka)
    id "jacoco"
}

jacoco {
    toolVersion = libs.versions.jacoco.get()
}

kotlin {
    jvmToolchain(17)
    jvm()
    js(IR) {
        browser {
            testTask {
                // Skip if CI
                enabled = "$System.env.CI".isEmpty()
            }
        }
        nodejs()
        useEsModules()
    }
    wasmJs {
        nodejs()
    }
    wasmWasi {
        nodejs()
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin("stdlib-common")
            }
        }
        commonTest {
            dependencies {
                implementation kotlin("test-common")
                implementation kotlin("test-annotations-common")
            }
        }
        jsMain {
            dependencies {
                implementation kotlin("stdlib-js")
            }
        }
        jsTest {
            dependencies {
                implementation kotlin("test-js")
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin("stdlib")
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin("test-junit")
            }
        }
        wasmJsTest {
            dependencies {
                implementation kotlin("test")
            }
        }
        wasmWasiTest {
            dependencies {
                implementation kotlin("test")
            }
        }
    }
}

tasks.register("jacocoTestReportJvm", JacocoReport) {
    group = "jacoco"
    dependsOn.add("jvmTest")

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def commonTree = fileTree(dir: "$buildDir/classes/kotlin/common/main", excludes: fileFilter)
    def jvmTree = fileTree(dir: "$buildDir/classes/kotlin/jvm/main", excludes: fileFilter)

    classDirectories.from(files(
            commonTree,
            jvmTree
    ))
    sourceDirectories.from(files(
            "src/commonMain/kotlin",
            "src/jvmMain/kotlin"
    ))
    executionData.from(files("$buildDir/jacoco/jvmTest.exec"))

    reports {
        xml.required = true
        html.required = true
    }
}

tasks.register("jacocoTestReportUnified", JacocoReport) {
    group = "jacoco"
    dependsOn.addAll(['jacocoTestReportJvm'/*, ':android:build'*/])

    def buildDirectory = layout.buildDirectory.getAsFile().get()
    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def commonTree = fileTree(dir: "$buildDirectory/classes/kotlin/common/main", excludes: fileFilter)
    def jvmTree = fileTree(dir: "$buildDirectory/classes/kotlin/jvm/main", excludes: fileFilter)
//    def androidTree = fileTree(dir: "${project(':android').buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)

    classDirectories.from(files(
            commonTree,
            jvmTree,
//            androidTree
    ))
    sourceDirectories.from(files(
            "src/commonMain/kotlin",
            "src/jvmMain/kotlin",
//            "${project(':android').projectDir}/src/androidMain/kotlin"
    ))
    //noinspection ChangeToOperator
    executionData.from(files(
            "$buildDirectory/jacoco/jvmTest.exec",
//            fileTree(dir: "${project(':android').buildDir}/jacoco", include: "*.exec")
    ))

    reports {
        xml.required = true
        xml.outputLocation.set(file("$buildDirectory/reports/jacoco/unified/jacocoTestReportUnified.xml"))
        html.required = true
        html.outputLocation.set(file("$buildDirectory/reports/jacoco/unified/html"))
    }
}

detekt {
    buildUponDefaultConfig = true
    allRules = false
    config.setFrom("detekt.yml")
}

tasks.register("cleanGhPages", Delete) { deleteTask ->
    group = "build"
    tasks.named("clean").get().dependsOn(deleteTask)

    deleteTask.delete(fileTree("gh-pages") {
        include '**'
        exclude 'CNAME'
        exclude 'index.html'
    })
}

tasks.dokkaHtml {
    outputDirectory = file("${project.projectDir}/gh-pages")
}

def tasksNeedingSigning = [
        tasks.register("dokkaJavadocCommonJar", Jar) {
            group = "publishing"
            dependsOn(dokkaGenerate)
            archiveClassifier.set('javadoc')
            from layout.buildDirectory.dir("dokka/html")
        },
        tasks.register("dokkaJavadocAndroidJar", Jar) {
            group = "publishing"
            archiveClassifier.set('javadoc')
            from project(projects.android.path).tasks.named("dokkaJavadocAndroidJar")
        },
        tasks.register("androidSourcesJar", Jar) {
            group = "publishing"
            archiveClassifier.set("sources")
            from project(projects.android.path).tasks.named("androidSourcesJar")
        },
]

publishing {
    publications.configureEach { pub ->
        pom.withXml {
            def root = asNode()

            root.children().last() + {
                resolveStrategy = 1 // DELEGATE_FIRST

                description POM_DESCRIPTION
                name POM_NAME
                url POM_URL
                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }
                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }
                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                        email POM_DEVELOPER_EMAIL
                        organization POM_DEVELOPER_ORGANIZATION
                        organizationUrl POM_DEVELOPER_ORGANIZATION_URL
                    }
                }
            }

            if (pub.artifactId == "arbor-android") {
                def dependenciesNode = asNode().appendNode('dependencies')
                appendDepNode(dependenciesNode, 'org.jetbrains.kotlin', 'kotlin-stdlib', libs.versions.kotlin.get(), 'runtime')
                appendDepNode(dependenciesNode, 'com.ToxicBakery.logging', 'arbor-jvm', version, 'runtime')
            }
        }
    }

    afterEvaluate {
        publications {
            maven(MavenPublication) {
                artifactId "arbor-android"
                artifact project(projects.android.path).tasks.named("bundleReleaseAar")
                artifact dokkaJavadocAndroidJar
                artifact androidSourcesJar
            }
        }
        publications.named("js") {
            artifact tasks.named("dokkaJavadocCommonJar")
        }
        publications.named("jvm") {
            artifact tasks.named("dokkaJavadocCommonJar")
        }
        publications.named("wasmJs") {
            artifact tasks.named("dokkaJavadocCommonJar")
        }
        publications.named("wasmWasi") {
            artifact tasks.named("dokkaJavadocCommonJar")
        }
        publications.named("kotlinMultiplatform") {
            artifact tasks.named("dokkaJavadocCommonJar")
        }
    }

    repositories {
        def releaseUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        def snapshotUrl = "https://oss.sonatype.org/content/repositories/snapshots"

        maven {
            url !version.contains("SNAPSHOT") ? releaseUrl : snapshotUrl
            credentials {
                username System.getenv('SONATYPE_USERNAME') ?: ""
                password System.getenv('SONATYPE_PASSWORD') ?: ""
            }
        }
    }
}

static def appendDepNode(Node node, String groupId, String artifactId, String ver, String scope) {
    def newNode = node.appendNode('dependency')
    newNode.appendNode('groupId', groupId)
    newNode.appendNode('artifactId', artifactId)
    newNode.appendNode('version', ver)
    newNode.appendNode('scope', scope)
}

signing {
    required false
    sign publishing.publications
}

tasks.withType(AbstractPublishToMaven).configureEach {
    dependsOn(tasksNeedingSigning)
}
tasks.withType(Sign).configureEach {
    dependsOn(tasksNeedingSigning)
}
tasks.withType(PublishToMavenRepository).configureEach {
    dependsOn(tasks.withType(Sign))
}

tasks.named("check").get().dependsOn("detekt")
tasks.named("build").get().dependsOn(
        "jacocoTestReportJvm",
        "jacocoTestReportUnified",
)
